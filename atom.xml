<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dark-yifeng.github.io</id>
    <title>Dark</title>
    <updated>2020-05-18T03:26:36.873Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dark-yifeng.github.io"/>
    <link rel="self" href="https://dark-yifeng.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dark-yifeng.github.io/images/avatar.png</logo>
    <icon>https://dark-yifeng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Dark</rights>
    <entry>
        <title type="html"><![CDATA[JavaScript（一）：类]]></title>
        <id>https://dark-yifeng.github.io/post/javascriptyi-lei/</id>
        <link href="https://dark-yifeng.github.io/post/javascriptyi-lei/">
        </link>
        <updated>2020-05-18T03:16:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="es5">ES5</h2>
<p>ECMAScript 2015 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法不会为JavaScript引入新的面向对象的继承模型。</p>
<p>类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。</p>
<p><strong>类声明</strong></p>
<p>定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。</p>
<pre><code class="language-csharp">class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
}
</code></pre>
<blockquote>
<p>函数声明和类声明之间的一个重要区别是函数声明会提升，类声明不会。</p>
</blockquote>
<p><strong>类表达式</strong></p>
<p>一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。</p>
<pre><code class="language-csharp">/* 匿名类 */ 
let Rectangle = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};

/* 命名的类 */ 
let Rectangle = class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
</code></pre>
<blockquote>
<p>类表达式也同样受到类声明中提到的提升问题的限制。</p>
</blockquote>
<h2 id="es6">ES6</h2>
<p>在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。它可以被看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。</p>
<h2 id="es5与es6对比">ES5与ES6对比</h2>
<h2 id="一">一</h2>
<p>在ES5中定义一个类：</p>
<pre><code class="language-csharp">function Person(name) {
 
    this.name = name;
}
 
Person.prototype.sayHello = function(){
 
    return 'Hi, I am ' + this.name;
}
</code></pre>
<p>而用ES6的写法重写一下，检测类型发现Person本质上仍然是函数：</p>
<pre><code class="language-csharp">class Person {
 
    constructor(name){
        this.name = name;
    }
 
    sayHello(){
        return 'Hi, I am ' + this.name;
    }
}
 
typeof Person; //'function'
</code></pre>
<p>调用的方式都是一致的：</p>
<pre><code class="language-csharp">var p1 = new Person('zhangsan');   
</code></pre>
<blockquote>
<p>用ES6定义class中的方法，定义在原型对象上的。与ES5不同的是，这些定义在原型对象的方法是不可枚举的。</p>
</blockquote>
<h2 id="二">二</h2>
<p>ES6类和模块是严格模式下的；不存在变量提升，保证子类父类的顺序；类的继承也有新的写法：</p>
<pre><code class="language-csharp">class Female extends Person {
 
    constructor(name){
        super(name); //调用父类的，调用之后，子类才有this
        this.sex = 'boy';
    }
 
    sayHello(){
        return super.sayHello() + ', I am ' + this.sex;
    }
 
}
</code></pre>
<p>注意，子类必须在父类的构造函数中调用super()，这样才有this对象，因为this对象是从父类继承下来的。而要在子类中调用父类的方法，用super关键词可指代父类。</p>
<p>ES5中类继承的关系是相反的，先有子类的this，然后用父类的方法应用在this上。</p>
<p>ES6类继承子类的this是从父类继承下来的这个特性，使得在ES6中可以构造原生数据结构的子类，这是ES5无法做到的。</p>
<h2 id="三">三</h2>
<p>ES6也可以定义类的静态方法和静态属性，静态的意思是这些不会被实例继承，不需要实例化类，就可以直接拿来用。ES6中class内部只能定义方法，不能定义属性。在方法名前加上static就表示这个方式是静态方法，而属性还是按照ES5的方式来实现。</p>
<pre><code class="language-csharp">function Person(name){
 
    if(new.target === Person){
        this.name = name;
    }
    else{
        throw new Error('必须用new生成实例');
    }
}
</code></pre>
<h2 id="四">四</h2>
<p>ES6中当函数用new关键词的时候，增加了new.target属性来判断当前调用的构造函数。这个有什么用处呢？可以限制函数的调用，比如一定要用new命令来调用，或者不能直接被实例化需要调用它的子类。</p>
<pre><code class="language-csharp">function Person(name){
 
    if(new.target === Person){
        this.name = name;
    }
    else{
        throw new Error('必须用new生成实例');
    }
}
</code></pre>
<h2 id="五">五</h2>
<p><strong>ES5类中的 实例方法&amp;原型方法&amp;静态方法</strong></p>
<p>1.实例方法只有实例可以调用</p>
<p>2.实例方法可以调用静态方法，不能调用原型方法</p>
<p>3.原型方法可以被实例和构造函数访问到</p>
<p>4.原型方法只可以调用静态方法</p>
<p>5.静态方法只有构造函数可以调用</p>
<p><strong>ES5中定义三种方法及调用关系：</strong></p>
<pre><code class="language-csharp">let Animal = function (type) {
  this.type = type
  // 实例方法
  this.drink = function () {
    // 实例方法可调用类的静态方法
    Animal.walk()
    console.log('drink')
  }
}

// 原型方法
Animal.prototype.eat = function () {
  // 原型方法可调用类的静态方法
  Animal.walk()
  console.log('eat food')
}

// 静态方法
Animal.walk = function () {
  console.log('walking')
}

let dog = new Animal('dog')
dog.drink() // walking drink
dog.eat() // walking eat food
Animal.walk() // walking静态方法只能由&lt;类自身&amp;实例方法&amp;原型方法&gt;调用，实例对象无法调用
// dog.walk() // dog.walk is not a function  实例对象无法调用静态方法
</code></pre>
<p><strong>ES6类中的 实例方法&amp;原型方法&amp;静态方法</strong></p>
<p>1.实例方法=原型方法 类中直接定义的实例方法默认就是ES5中的原型方法（语法糖）</p>
<p>2.静态方法用static前缀定义</p>
<p>3.静态方法只有构造函数可以调用，原型方法是实例和构造函数都可以调用，是共享的方法。</p>
<p><strong>ES6中定义三种方法及调用关系：</strong></p>
<pre><code class="language-csharp">class Animal {
  constructor (type) {
    this.type = type
  }
  // 定义实例对象的方法
  eat () {
    // 使用静态方法，以类形式访问，而非this访问
    Animal.walk()
    console.log('eat food')
    console.log(this.type) // 类的例实例对象的方法可以获取到实例对象的信息，输出dog
  }
  // static 定义类的静态方法
  static walk () {
    console.log('walking')
    console.log(this.type) // 类的静态方法无法获取到实例对象的信息，输出undefined
  }
}
let dog = new Animal('dog')
dog.eat() // walking ； undefined ； eat food ； dog
Animal.walk() // walking ； undefined ；
dog.walk() // dog.walk is not a function
// 得出结论：需要访问实例对象的信息时用实例对象的方法，否则使用static静态方法
// 实例方法就是只有实例可以调用，静态方法只有构造函数可以调用，原型方法是实例和构造函数都可以调用，是共享的方法。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript（二）：MV*]]></title>
        <id>https://dark-yifeng.github.io/post/hello-gridea/</id>
        <link href="https://dark-yifeng.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>MVC,MVP,MVVM都属于MV*框架，正在一点一点的完善。我们平常用的react框架就是MVC框架，而Vue和angular则是MVVM框架。</p>
<h2 id="发展历程">发展历程</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200229142214807.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="mvc">MVC</h2>
<p>1.即Model、View、Controller即模型、视图、控制器。</p>
<p>View：它是提供给用户的操作界面，是程序的外壳；<br>
Model：是程序需要操作的数据和信息；<br>
Controller：接收View层传递过来的指令，选取Model层对应的数据，进行相应操作。</p>
<p>2.举一个现实中的类似的例子，MVC如同一家商铺的运作模式，View层相当于是这家商铺的店面，Model层相当于这家商铺的仓库，Controller层相当于是这家商铺的执行部门。</p>
<p>3.MVC有如下两种模式，不管哪种模式，MVC的通信都是单向的，由图也可以看出，View层会从Model层拿数据，因此MVC中的View层和Model层还是存在耦合的。<br>
<img src="https://img-blog.csdnimg.cn/20200229142325447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXlpZmVuZzAwMDA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200229142340570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXlpZmVuZzAwMDA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
M和V是完全隔离的，由C作为中间人来负责二者的交互，同时三者是完全独立分开的，这样可以保证M和V的可测试性和复用性，但是一般由于C都是为特别的应用场景下的M和V做中介者，所以很难复用。</p>
<p>Models： 数据层，负责数据的处理和获取的数据接口层。</p>
<p>Views： 展示层(GUI)，对于 iOS 来说所有以 UI 开头的类基本都属于这层。</p>
<p>Controller： 控制器层，它是 Model 和 View 之间的胶水或者说是中间人。一般来说，当用户对 View 有操作时它负责去修改相应 Model；当 Model 的值发生变化时它负责去更新对应 View。</p>
<p><strong>优点：</strong></p>
<p>1.代码复用: 三个小模块的V(cell/userInfoView)对外只暴露Set方法, 对M甚至C都是隔离状态, 复用完全没有问题. 三个大模块的MVC也可以用于快速构建相似的业务场景(大模块的复用比小模块会差一些, 下文我会说明).</p>
<p>2.代码臃肿: 因为Scene大部分的逻辑和布局都转移到了相应的MVC中, 我们仅仅是拼装MVC的便构建了两个不同的业务场景, 每个业务场景都能正常的进行相应的数据展示, 也有相应的逻辑交互, 而完成这些东西, 加空格也就100行代码左右(当然, 这里我忽略了一下Scene的布局代码).</p>
<p>3.易拓展性: 无论产品未来想加回收站还是防御塔, 我需要的只是新建相应的MVC模块, 加到对应的Scene即可.</p>
<p>4.可维护性: 各个模块间职责分离, 哪里出错改哪里, 完全不影响其他模块. 另外, 各个模块的代码其实并不算多, 哪一天即使写代码的人离职了, 接手的人根据错误提示也能快速定位出错模块.</p>
<p>5.易测试性: 很遗憾, 业务的初始化依然绑定在Scene的生命周期中, 而有些逻辑也仍然需要UI的点击事件触发, 我们依然只能Command+R, 点点点…</p>
<p><strong>缺点</strong></p>
<p>经过上面的改造，MVC架构已经足够清晰了，按照应用场景（一般都是单页面）进行大的拆分，然后在根据业务拆分成小的MVC。不行就接着拆，拆层，拆模块。</p>
<p>但是MVC的最大弊端就是C的代码没法复用，所以能把C层的代码拆出来就尽量拆，我们来看看现在C层的功能还有哪些了</p>
<p>1.作为View和Model的中介者，从model获取数据，经过数据加工，渲染到view上面显示。</p>
<p>2.响应view的点击事件，然后执行相应的业务逻辑。</p>
<p>3.作为view的代理和数据源。</p>
<p>4.暴露接口给SceneVC来驱动自己获取数据。</p>
<h2 id="mvp">MVP</h2>
<p>1.MVP是从MVC进化而来，即Model、View、Presenter；View和Model同MVC中的M和V，MVP只是将MVC中的Controller变成了Presenter；</p>
<p>2.由上面对MVC的介绍中我们可以得知，MVC中的View层和Model层是存在耦合的，但其实我们不提倡View层与Model层有直接的交互；MVP就是这样一种思想的体现，View层与Model的交互只能通过Presenter；</p>
<p>3.MVP与MVC还有一点不同是，它的通信是双向的，如下图所示，有两个方向：V—&gt;P—&gt;M，M—&gt;P—&gt;V。<br>
让P持有V，P通过V的暴露接口改变V的显示数据和状态，P通过V的事件回调来执行自身的业务逻辑。<br>
让V持有P，V通过P的代理回调来改变自身的显示数据和状态，V直接调用P的接口来执行事件响应对应的业务逻辑。<br>
<img src="https://img-blog.csdnimg.cn/20200229142513473.png" alt="在这里插入图片描述" loading="lazy"><br>
第一种方式保持了view的纯粹，只是作为被动view来展示数据和更改状态，但是却导致了P耦合了V，这样业务逻辑和业务展示有糅合到了一起，和上面的MVC一样了。</p>
<p>第二种方式保证了P的纯粹，让P只做业务逻辑，至于业务逻辑引发的数据显示的变化，让view实现对应的代理事件来实现即可。这增加了view的复杂和view对于P的耦合。</p>
<p>在 MVP 中，Presenter 可以理解为松散的控制器，其中包含了视图的 UI 业务逻辑，所有从视图发出的事件，都会通过代理给 Presenter 进行处理；同时，Presenter 也通过视图暴露的接口与其进行通信。</p>
<p><strong>VC层</strong></p>
<p>1.view的布局和组装。</p>
<p>2.view的生命周期控制。</p>
<p>3.通知各个P层去获取数据然后渲染到view上面展示。</p>
<p><strong>controller层</strong></p>
<p>1.生成view，实现view的代理和数据源。</p>
<p>2.绑定view和presenter。</p>
<p>3.调用presenter执行业务逻辑。</p>
<p><strong>model层</strong></p>
<p>1.和MVC的model层类似。</p>
<p><strong>view层</strong></p>
<p>1.监听P层的数据更新通知, 刷新页面展示.（MVC里由C层负责）。</p>
<p>2.在点击事件触发时, 调用P层的对应方法, 并对方法执行结果进行展示.（MVC里由C层负责）。</p>
<p>3.界面元素布局和动画。</p>
<p>4.反馈用户操作。</p>
<p><strong>Presenter层</strong></p>
<p>1.实现view的事件处理逻辑，暴露相应的接口给view的事件调用。</p>
<p>2.调用model的接口获取数据，然后加工数据，封装成view可以直接用来显示的数据和状态。</p>
<p>3.处理界面之间的跳转（这个根据实际情况来确定放在P还是C）。</p>
<p><strong>优点：</strong></p>
<p>1.降低耦合度。</p>
<p>2.模块职责划分明显。</p>
<p>3.利于测试驱动开发。</p>
<p>4.代码复用。</p>
<p>5.隐藏数据。</p>
<p>6.代码灵活性。</p>
<p><strong>缺点：</strong></p>
<p>由于对视图的渲染放在了Presenter中，所以视图和Presenter的交互会过于频繁。如果Presenter过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么Presenter也需要变更了。</p>
<h2 id="mvvm">MVVM</h2>
<p>1.MVVM是由MVP进化而来，MVVM模式基本上与MVP相同，只是把MVP中的P变成了VM，即ViewModel，</p>
<p>2.MVVM中的数据可以实现双向绑定，即View层数据变化则ViewModel中的数据也随之变化，反之ViewModel中的数据变化，则View层数据也随之变化。<br>
<img src="https://img-blog.csdnimg.cn/20200229142615816.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>View层：视图展示。包含UIView以及UIViewController，View层是可以持有ViewModel的。</p>
<p>ViewModel层：视图适配器。暴露属性与View元素显示内容或者元素状态一一对应。一般情况下ViewModel暴露的属性建议是readOnly的，至于为什么，我们在实战中会去解释。还有一点，ViewModel层是可以持有Model的。</p>
<p>Model层：数据模型与持久化抽象模型。数据模型很好理解，就是从服务器拉回来的JSON数据。而持久化抽象模型暂时放在Model层，是因为MVVM诞生之初就没有对这块进行很细致的描述。按照经验，我们通常把数据库、文件操作封装成Model，并对外提供操作接口。（有些公司把数据存取操作单拎出来一层，称之为DataAdapter层，所以在业内会有很多MVVM的变种，但其本质上都是MVVM）。</p>
<p>Binder：MVVM的灵魂。可惜在MVVM这几个英文单词中并没有它的一席之地，它的最主要作用是在View和ViewModel之间做了双向数据绑定。如果MVVM没有Binder，那么它与MVC的差异不是很大。</p>
<p><strong>优点：</strong></p>
<p>1.方便测试<br>
在MVC下，Controller基本是无法测试的，里面混杂了个各种逻辑，而且分散在不同的地方。有了MVVM我们就可以测试里面的viewModel，来验证我们的处理结果对不对（Xcode7的测试已经越来越完善了）。</p>
<p>2.便于代码的移植<br>
比如iOS里面有iPhone版本和iPad版本，除了交互展示不一样外，业务逻辑的model是一致的。这样，我们就可以以很小的代价去开发另一个app。（以前做公司iPad的时候就深深感觉到，全部在VC里面是多么的痛苦和重新开发一个没有啥区别）。</p>
<p>3.兼容MVC<br>
MVVM是MVC的一个升级版，目前的MVC也可以很快的转换到MVVM这个模式。VC可以省去一大部分展示逻辑。</p>
<p><strong>缺点：</strong></p>
<p>1.类会增多<br>
每个VC都附带一个viewModel，类的数量*2<br>
viewModel会越来越庞大<br>
我们把逻辑给了viewModel，那势必Model也会变得很复杂，里面的属性和方法越来越多。可能重写的方法比较多，因为涉及到一些数据的转换以及和controller之间的通信。</p>
<p>2.调用复杂度增加<br>
由于数据都是从viewModel来，想想突然来了一个新人，一看代码，不知道真实的模型是谁。比如常用tableview的数据源，一般都是一个数组，如果不断的通过viewModel去取，沟通上没有那么直接。况且每封一层，意味着要写很多代码去融合他们的转换。</p>
]]></content>
    </entry>
</feed>